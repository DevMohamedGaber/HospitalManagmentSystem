@page "/login"
@using Domain.DTO.Identity;
@using Persistence.Identity.Features.Login;
@inject IMediator _mediator;

<h3>Login</h3>

<EditForm Model=@request OnValidSubmit=@Submit>
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Email">Email address</label>
        <InputText type="email" class="form-control" id="Email" placeholder="Enter email" @bind-Value=request.Email/>
        <ValidationMessage For="() => request!.Email" ></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="Password">Password</label>
        <InputText type="password" class="form-control" id="Password" placeholder="Password" @bind-Value=request.Password />
        <ValidationMessage For="() => request!.Password"></ValidationMessage>
    </div>

    <div class="form-check">
        <InputCheckbox type="checkbox" class="form-check-input" id="RememberMe" @bind-Value=request.RememberMe/>
        <label class="form-check-label" for="RememberMe">Remember Me?</label>
    </div>

    <p>@errorMsg</p>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<p>Go To <a href="/register">Register</a></p>

@code {
    [SupplyParameterFromForm]
    private UserLoginRequest request { get; set; } = new();
    private string? errorMsg { get; set; }

    async void Submit()
    {
        var res = await _mediator.Send(request);
        if(res == null)
        {
            return;
        }

    }
}
